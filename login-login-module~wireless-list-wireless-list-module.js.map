{"version":3,"sources":["webpack:///./node_modules/@ngx-translate/core/fesm5/ngx-translate-core.js","webpack:///./src/app/service/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AAC4F;AAC7F;AACiB;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,+CAAE,GAAG;AACpB;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,mBAAmB,EAAE,+BAA+B,EAAE,+BAA+B,EAAE,uBAAuB,EAAE,oBAAoB,EAAE;AACtI;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE,6BAA6B;AAClD;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,IAAI,uDAAS;AACb;AACA,uCAAuC,sDAAQ;AAC/C,mCAAmC,QAAQ,UAAU;AACrD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,uCAAuC,0DAAY;AACnD;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,uCAAuC,0DAAY;AACnD;AACA;AACA,CAAC;;AAED,eAAe,EAAE,oBAAoB,4DAAc;AACnD,eAAe,EAAE,2BAA2B,4DAAc;AAC1D;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA,wCAAwC,uBAAuB;AAC/D,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,0DAAY;AACpD,iCAAiC,0DAAY;AAC7C,wCAAwC,0DAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB,2DAAI;AAC7B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAE;AACrB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB,2DAAI;AAC7B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gFAAgF,4DAAK;AACrF,sCAAsC,2DAAI;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oDAAoD;AAC3F;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,2BAA2B,EAAE,eAAe,aAAa,EAAE;AAC3D;AACA,iCAAiC,sDAAQ,8BAA8B,eAAe;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,qCAAqC,sDAAQ,8BAA8B,eAAe;AAC1F;AACA,uCAAuC,EAAE,kEAAkE,+CAAE,YAAY,EAAE;AAC3H;AACA;AACA;AACA;AACA,wCAAwC,kDAAK;AAC7C;AACA;AACA;AACA,+BAA+B,QAAQ,gBAAgB;AACvD;AACA;AACA;AACA;AACA,6BAA6B,0BAA0B;AACvD;AACA,sCAAsC,8DAAO,IAAI,0DAAG;AACpD,mCAAmC,EAAE;AACrC;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,uBAAuB,+CAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mDAAM,0DAA0D,gEAAS;AACxF,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,uBAAuB,+CAAE;AACzB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8BAA8B,yBAAyB;AACvD;AACA;AACA,uCAAuC,oDAAoD;AAC3F;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,gCAAgC,oDAAoD;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uCAAuC,oDAAoD;AAC3F;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB;AACA;AACA,+CAA+C;AAC/C,KAAK,wBAAwB;AAC7B,KAAK,yBAAyB;AAC9B,KAAK,2BAA2B;AAChC,KAAK,yBAAyB;AAC9B,KAAK,mCAAmC;AACxC,KAAK,gCAAgC,OAAO,oDAAM,6BAA6B,IAAI;AACnF,KAAK,gCAAgC,OAAO,oDAAM,sBAAsB,IAAI;AAC5E,EAAE;;AAEF;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,qCAAqC,qBAAqB;AAC1D,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,kBAAkB;AAC1D,2BAA2B,EAAE;AAC7B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa,IAAI;AACjB;AACA;AACA,iDAAiD;AACjD,KAAK,0BAA0B;AAC/B,KAAK,OAAO,wDAAU,GAAG;AACzB,KAAK,OAAO,+DAAiB,GAAG;AAChC,EAAE;AACF;AACA,mBAAmB,OAAO,mDAAK,EAAE;AACjC,yBAAyB,OAAO,mDAAK,EAAE;AACvC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,sEAAsE,IAAI,GAAG,MAAM,GAAG;AACtF,yFAAyF,MAAM,KAAK;AACpG,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,kDAAI;AAChB;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA,4CAA4C;AAC5C,KAAK,0BAA0B;AAC/B,KAAK,OAAO,+DAAiB,GAAG;AAChC,EAAE;;AAEF;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA,kCAAkC,0DAA0D;AAC5F,oCAAoC,8DAA8D;AAClG,kCAAkC,6DAA6D;AAC/F,qDAAqD,8EAA8E;AACnI;AACA,iBAAiB,+CAA+C;AAChE,iBAAiB,6DAA6D;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA,kCAAkC,0DAA0D;AAC5F,oCAAoC,8DAA8D;AAClG,kCAAkC,6DAA6D;AAC/F,qDAAqD,8EAA8E;AACnI,iBAAiB,+CAA+C;AAChE,iBAAiB,6DAA6D;AAC9E;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;;AAEgT;AAChT;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjzC8D;AACZ;AAET;AACc;AAKvD;IAEE,qBACU,IAAgB,EACjB,MAAc,EACb,gBAAkC;QAFlC,SAAI,GAAJ,IAAI,CAAY;QACjB,WAAM,GAAN,MAAM,CAAQ;QACb,qBAAgB,GAAhB,gBAAgB,CAAkB;QAMrC,YAAO,GAAG,+BAA+B,CAAC;QAC1C,cAAS,GAAG,IAAI,CAAC;QACjB,SAAI,GAAG,OAAO,CAAC;QANpB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAEhE,CAAC;IAMM,kCAAY,GAAnB,UAAoB,WAAmB;QACrC,IAAI,WAAW,IAAI,IAAI,EAAE;YACvB,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;SACjD;aAAM;YACL,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;SAC3D;QACD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,4BAAM,GAAb;QAAA,iBAUC;QATC,IAAM,IAAI,GAAG;YACX,OAAO,EAAE,IAAI,CAAC,SAAS;SACxB,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAI,IAAI,CAAC,OAAO,YAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CACtE,aAAG;YACD,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACxB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnC,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,2BAAK,GAAZ,UAAa,SAAS;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAI,IAAI,CAAC,OAAO,WAAQ,EAAE,SAAS,CAAC,CAAC;IAC5D,CAAC;IAEM,oCAAc,GAArB,UAAsB,SAAS;QAC7B,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAjDU,WAAW;QAHvB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAIgB,+DAAU;YACT,sDAAM;YACK,oEAAgB;OALjC,WAAW,CAkDvB;IAAD,kBAAC;CAAA;AAlDuB","file":"login-login-module~wireless-list-wireless-list-module.js","sourcesContent":["import { __extends, __values, __spread } from 'tslib';\nimport { Injectable, EventEmitter, Inject, InjectionToken, ChangeDetectorRef, Directive, ElementRef, Input, Pipe, NgModule } from '@angular/core';\nimport { of, concat, merge, Observable } from 'rxjs';\nimport { map, share, switchMap, take, toArray } from 'rxjs/operators';\n\n/**\n * @abstract\n */\nvar TranslateLoader = /** @class */ (function () {\n    function TranslateLoader() {\n    }\n    return TranslateLoader;\n}());\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nvar TranslateFakeLoader = /** @class */ (function (_super) {\n    __extends(TranslateFakeLoader, _super);\n    function TranslateFakeLoader() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateFakeLoader.prototype.getTranslation = function (lang) {\n        return of({});\n    };\n    return TranslateFakeLoader;\n}(TranslateLoader));\nTranslateFakeLoader.decorators = [\n    { type: Injectable },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n */\nvar MissingTranslationHandler = /** @class */ (function () {\n    function MissingTranslationHandler() {\n    }\n    return MissingTranslationHandler;\n}());\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nvar FakeMissingTranslationHandler = /** @class */ (function () {\n    function FakeMissingTranslationHandler() {\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    FakeMissingTranslationHandler.prototype.handle = function (params) {\n        return params.key;\n    };\n    return FakeMissingTranslationHandler;\n}());\nFakeMissingTranslationHandler.decorators = [\n    { type: Injectable },\n];\n\n/**\n * @abstract\n */\nvar TranslateCompiler = /** @class */ (function () {\n    function TranslateCompiler() {\n    }\n    return TranslateCompiler;\n}());\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nvar TranslateFakeCompiler = /** @class */ (function (_super) {\n    __extends(TranslateFakeCompiler, _super);\n    function TranslateFakeCompiler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateFakeCompiler.prototype.compile = function (value, lang) {\n        return value;\n    };\n    /**\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateFakeCompiler.prototype.compileTranslations = function (translations, lang) {\n        return translations;\n    };\n    return TranslateFakeCompiler;\n}(TranslateCompiler));\nTranslateFakeCompiler.decorators = [\n    { type: Injectable },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {?} o1 Object or value to compare.\n * @param {?} o2 Object or value to compare.\n * @return {?} true if arguments are equal.\n */\nfunction equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    var /** @type {?} */ t1 = typeof o1, /** @type {?} */ t2 = typeof o2, /** @type {?} */ length, /** @type {?} */ key, /** @type {?} */ keySet;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2))\n                return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key]))\n                        return false;\n                }\n                return true;\n            }\n        }\n        else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDefined(value) {\n    return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\nfunction mergeDeep(target, source) {\n    var /** @type {?} */ output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach(function (key) {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, (_a = {}, _a[key] = source[key], _a));\n                }\n                else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            }\n            else {\n                Object.assign(output, (_b = {}, _b[key] = source[key], _b));\n            }\n            var _a, _b;\n        });\n    }\n    return output;\n}\n\n/**\n * @abstract\n */\nvar TranslateParser = /** @class */ (function () {\n    function TranslateParser() {\n    }\n    return TranslateParser;\n}());\nvar TranslateDefaultParser = /** @class */ (function (_super) {\n    __extends(TranslateDefaultParser, _super);\n    function TranslateDefaultParser() {\n        var _this = _super.apply(this, __spread(arguments)) || this;\n        _this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n        return _this;\n    }\n    /**\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    TranslateDefaultParser.prototype.interpolate = function (expr, params) {\n        var /** @type {?} */ result;\n        if (typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        }\n        else if (typeof expr === 'function') {\n            result = this.interpolateFunction(expr, params);\n        }\n        else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = /** @type {?} */ (expr);\n        }\n        return result;\n    };\n    /**\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n    TranslateDefaultParser.prototype.getValue = function (target, key) {\n        var /** @type {?} */ keys = key.split('.');\n        key = '';\n        do {\n            key += keys.shift();\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            }\n            else if (!keys.length) {\n                target = undefined;\n            }\n            else {\n                key += '.';\n            }\n        } while (keys.length);\n        return target;\n    };\n    /**\n     * @param {?} fn\n     * @param {?=} params\n     * @return {?}\n     */\n    TranslateDefaultParser.prototype.interpolateFunction = function (fn, params) {\n        return fn(params);\n    };\n    /**\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    TranslateDefaultParser.prototype.interpolateString = function (expr, params) {\n        var _this = this;\n        if (!params) {\n            return expr;\n        }\n        return expr.replace(this.templateMatcher, function (substring, b) {\n            var /** @type {?} */ r = _this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    };\n    return TranslateDefaultParser;\n}(TranslateParser));\nTranslateDefaultParser.decorators = [\n    { type: Injectable },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar TranslateStore = /** @class */ (function () {\n    function TranslateStore() {\n        /**\n         * The lang currently used\n         */\n        this.currentLang = this.defaultLang;\n        /**\n         * a list of translations per lang\n         */\n        this.translations = {};\n        /**\n         * an array of langs\n         */\n        this.langs = [];\n        /**\n         * An EventEmitter to listen to translation change events\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onTranslationChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to lang change events\n         * onLangChange.subscribe((params: LangChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onLangChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to default lang change events\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onDefaultLangChange = new EventEmitter();\n    }\n    return TranslateStore;\n}());\n\nvar /** @type {?} */ USE_STORE = new InjectionToken('USE_STORE');\nvar /** @type {?} */ USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nvar TranslateService = /** @class */ (function () {\n    /**\n     *\n     * @param {?} store an instance of the store (that is supposed to be unique)\n     * @param {?} currentLoader An instance of the loader currently used\n     * @param {?} compiler An instance of the compiler currently used\n     * @param {?} parser An instance of the parser currently used\n     * @param {?} missingTranslationHandler A handler for missing translations.\n     * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param {?=} isolate whether this service should use the store or not\n     */\n    function TranslateService(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang, isolate) {\n        if (useDefaultLang === void 0) { useDefaultLang = true; }\n        if (isolate === void 0) { isolate = false; }\n        this.store = store;\n        this.currentLoader = currentLoader;\n        this.compiler = compiler;\n        this.parser = parser;\n        this.missingTranslationHandler = missingTranslationHandler;\n        this.useDefaultLang = useDefaultLang;\n        this.isolate = isolate;\n        this.pending = false;\n        this._onTranslationChange = new EventEmitter();\n        this._onLangChange = new EventEmitter();\n        this._onDefaultLangChange = new EventEmitter();\n        this._langs = [];\n        this._translations = {};\n        this._translationRequests = {};\n    }\n    Object.defineProperty(TranslateService.prototype, \"onTranslationChange\", {\n        /**\n         * An EventEmitter to listen to translation change events\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n         *     // do something\n         * });\n         * @return {?}\n         */\n        get: function () {\n            return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TranslateService.prototype, \"onLangChange\", {\n        /**\n         * An EventEmitter to listen to lang change events\n         * onLangChange.subscribe((params: LangChangeEvent) => {\n         *     // do something\n         * });\n         * @return {?}\n         */\n        get: function () {\n            return this.isolate ? this._onLangChange : this.store.onLangChange;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TranslateService.prototype, \"onDefaultLangChange\", {\n        /**\n         * An EventEmitter to listen to default lang change events\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n         *     // do something\n         * });\n         * @return {?}\n         */\n        get: function () {\n            return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TranslateService.prototype, \"defaultLang\", {\n        /**\n         * The default lang to fallback when translations are missing on the current lang\n         * @return {?}\n         */\n        get: function () {\n            return this.isolate ? this._defaultLang : this.store.defaultLang;\n        },\n        /**\n         * @param {?} defaultLang\n         * @return {?}\n         */\n        set: function (defaultLang) {\n            if (this.isolate) {\n                this._defaultLang = defaultLang;\n            }\n            else {\n                this.store.defaultLang = defaultLang;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TranslateService.prototype, \"currentLang\", {\n        /**\n         * The lang currently used\n         * @return {?}\n         */\n        get: function () {\n            return this.isolate ? this._currentLang : this.store.currentLang;\n        },\n        /**\n         * @param {?} currentLang\n         * @return {?}\n         */\n        set: function (currentLang) {\n            if (this.isolate) {\n                this._currentLang = currentLang;\n            }\n            else {\n                this.store.currentLang = currentLang;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TranslateService.prototype, \"langs\", {\n        /**\n         * an array of langs\n         * @return {?}\n         */\n        get: function () {\n            return this.isolate ? this._langs : this.store.langs;\n        },\n        /**\n         * @param {?} langs\n         * @return {?}\n         */\n        set: function (langs) {\n            if (this.isolate) {\n                this._langs = langs;\n            }\n            else {\n                this.store.langs = langs;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TranslateService.prototype, \"translations\", {\n        /**\n         * a list of translations per lang\n         * @return {?}\n         */\n        get: function () {\n            return this.isolate ? this._translations : this.store.translations;\n        },\n        /**\n         * @param {?} translations\n         * @return {?}\n         */\n        set: function (translations) {\n            if (this.isolate) {\n                this._translations = translations;\n            }\n            else {\n                this.store.translations = translations;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the default language to use as a fallback\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateService.prototype.setDefaultLang = function (lang) {\n        var _this = this;\n        if (lang === this.defaultLang) {\n            return;\n        }\n        var /** @type {?} */ pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if (!this.defaultLang) {\n                this.defaultLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe(function (res) {\n                _this.changeDefaultLang(lang);\n            });\n        }\n        else {\n            // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    };\n    /**\n     * Gets the default language used\n     * @return {?}\n     */\n    TranslateService.prototype.getDefaultLang = function () {\n        return this.defaultLang;\n    };\n    /**\n     * Changes the lang currently used\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateService.prototype.use = function (lang) {\n        var _this = this;\n        // don't change the language if the language given is already selected\n        if (lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n        var /** @type {?} */ pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if (!this.currentLang) {\n                this.currentLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe(function (res) {\n                _this.changeLang(lang);\n            });\n            return pending;\n        }\n        else {\n            // we have this language, return an Observable\n            this.changeLang(lang);\n            return of(this.translations[lang]);\n        }\n    };\n    /**\n     * Retrieves the given translations\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateService.prototype.retrieveTranslations = function (lang) {\n        var /** @type {?} */ pending;\n        // if this language is unavailable, ask for it\n        if (typeof this.translations[lang] === \"undefined\") {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n        return pending;\n    };\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateService.prototype.getTranslation = function (lang) {\n        var _this = this;\n        this.pending = true;\n        this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n        this.loadingTranslations.pipe(take(1))\n            .subscribe(function (res) {\n            _this.translations[lang] = _this.compiler.compileTranslations(res, lang);\n            _this.updateLangs();\n            _this.pending = false;\n        }, function (err) {\n            _this.pending = false;\n        });\n        return this.loadingTranslations;\n    };\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param {?} lang\n     * @param {?} translations\n     * @param {?=} shouldMerge\n     * @return {?}\n     */\n    TranslateService.prototype.setTranslation = function (lang, translations, shouldMerge) {\n        if (shouldMerge === void 0) { shouldMerge = false; }\n        translations = this.compiler.compileTranslations(translations, lang);\n        if (shouldMerge && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        }\n        else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    };\n    /**\n     * Returns an array of currently available langs\n     * @return {?}\n     */\n    TranslateService.prototype.getLangs = function () {\n        return this.langs;\n    };\n    /**\n     * Add available langs\n     * @param {?} langs\n     * @return {?}\n     */\n    TranslateService.prototype.addLangs = function (langs) {\n        var _this = this;\n        langs.forEach(function (lang) {\n            if (_this.langs.indexOf(lang) === -1) {\n                _this.langs.push(lang);\n            }\n        });\n    };\n    /**\n     * Update the list of available langs\n     * @return {?}\n     */\n    TranslateService.prototype.updateLangs = function () {\n        this.addLangs(Object.keys(this.translations));\n    };\n    /**\n     * Returns the parsed result of the translations\n     * @param {?} translations\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n    TranslateService.prototype.getParsedResult = function (translations, key, interpolateParams) {\n        var /** @type {?} */ res;\n        if (key instanceof Array) {\n            var /** @type {?} */ result = {}, /** @type {?} */ observables = false;\n            try {\n                for (var key_1 = __values(key), key_1_1 = key_1.next(); !key_1_1.done; key_1_1 = key_1.next()) {\n                    var k = key_1_1.value;\n                    result[k] = this.getParsedResult(translations, k, interpolateParams);\n                    if (typeof result[k].subscribe === \"function\") {\n                        observables = true;\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (key_1_1 && !key_1_1.done && (_a = key_1.return)) _a.call(key_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            if (observables) {\n                var /** @type {?} */ mergedObs = void 0;\n                try {\n                    for (var key_2 = __values(key), key_2_1 = key_2.next(); !key_2_1.done; key_2_1 = key_2.next()) {\n                        var k = key_2_1.value;\n                        var /** @type {?} */ obs = typeof result[k].subscribe === \"function\" ? result[k] : of(/** @type {?} */ (result[k]));\n                        if (typeof mergedObs === \"undefined\") {\n                            mergedObs = obs;\n                        }\n                        else {\n                            mergedObs = merge(mergedObs, obs);\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (key_2_1 && !key_2_1.done && (_b = key_2.return)) _b.call(key_2);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n                return mergedObs.pipe(toArray(), map(function (arr) {\n                    var /** @type {?} */ obj = {};\n                    arr.forEach(function (value, index) {\n                        obj[key[index]] = value;\n                    });\n                    return obj;\n                }));\n            }\n            return result;\n        }\n        if (translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n        if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n        if (typeof res === \"undefined\") {\n            var /** @type {?} */ params = { key: key, translateService: this };\n            if (typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n        return typeof res !== \"undefined\" ? res : key;\n        var e_1, _a, e_2, _b;\n    };\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} the translated key, or an object of translated keys\n     */\n    TranslateService.prototype.get = function (key, interpolateParams) {\n        var _this = this;\n        if (!isDefined(key) || !key.length) {\n            throw new Error(\"Parameter \\\"key\\\" required\");\n        }\n        // check if we are loading a new translation to use\n        if (this.pending) {\n            return Observable.create(function (observer) {\n                var /** @type {?} */ onComplete = function (res) {\n                    observer.next(res);\n                    observer.complete();\n                };\n                var /** @type {?} */ onError = function (err) {\n                    observer.error(err);\n                };\n                _this.loadingTranslations.subscribe(function (res) {\n                    res = _this.getParsedResult(_this.compiler.compileTranslations(res, _this.currentLang), key, interpolateParams);\n                    if (typeof res.subscribe === \"function\") {\n                        res.subscribe(onComplete, onError);\n                    }\n                    else {\n                        onComplete(res);\n                    }\n                }, onError);\n            });\n        }\n        else {\n            var /** @type {?} */ res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            if (typeof res.subscribe === \"function\") {\n                return res;\n            }\n            else {\n                return of(res);\n            }\n        }\n    };\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n    TranslateService.prototype.stream = function (key, interpolateParams) {\n        var _this = this;\n        if (!isDefined(key) || !key.length) {\n            throw new Error(\"Parameter \\\"key\\\" required\");\n        }\n        return concat(this.get(key, interpolateParams), this.onLangChange.pipe(switchMap(function (event) {\n            var /** @type {?} */ res = _this.getParsedResult(event.translations, key, interpolateParams);\n            if (typeof res.subscribe === \"function\") {\n                return res;\n            }\n            else {\n                return of(res);\n            }\n        })));\n    };\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n    TranslateService.prototype.instant = function (key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(\"Parameter \\\"key\\\" required\");\n        }\n        var /** @type {?} */ res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if (typeof res.subscribe !== \"undefined\") {\n            if (key instanceof Array) {\n                var /** @type {?} */ obj_1 = {};\n                key.forEach(function (value, index) {\n                    obj_1[key[index]] = key[index];\n                });\n                return obj_1;\n            }\n            return key;\n        }\n        else {\n            return res;\n        }\n    };\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param {?} key\n     * @param {?} value\n     * @param {?=} lang\n     * @return {?}\n     */\n    TranslateService.prototype.set = function (key, value, lang) {\n        if (lang === void 0) { lang = this.currentLang; }\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    };\n    /**\n     * Changes the current lang\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateService.prototype.changeLang = function (lang) {\n        this.currentLang = lang;\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\n        // if there is no default lang, use the one that we just set\n        if (!this.defaultLang) {\n            this.changeDefaultLang(lang);\n        }\n    };\n    /**\n     * Changes the default lang\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateService.prototype.changeDefaultLang = function (lang) {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\n    };\n    /**\n     * Allows to reload the lang file from the file\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateService.prototype.reloadLang = function (lang) {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    };\n    /**\n     * Deletes inner translation\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateService.prototype.resetLang = function (lang) {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    };\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     * @return {?}\n     */\n    TranslateService.prototype.getBrowserLang = function () {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        var /** @type {?} */ browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        if (browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n        if (browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n        return browserLang;\n    };\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     * @return {?}\n     */\n    TranslateService.prototype.getBrowserCultureLang = function () {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        var /** @type {?} */ browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        return browserCultureLang;\n    };\n    return TranslateService;\n}());\nTranslateService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nTranslateService.ctorParameters = function () { return [\n    { type: TranslateStore, },\n    { type: TranslateLoader, },\n    { type: TranslateCompiler, },\n    { type: TranslateParser, },\n    { type: MissingTranslationHandler, },\n    { type: undefined, decorators: [{ type: Inject, args: [USE_DEFAULT_LANG,] },] },\n    { type: undefined, decorators: [{ type: Inject, args: [USE_STORE,] },] },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar TranslateDirective = /** @class */ (function () {\n    /**\n     * @param {?} translateService\n     * @param {?} element\n     * @param {?} _ref\n     */\n    function TranslateDirective(translateService, element, _ref) {\n        var _this = this;\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(function (event) {\n                if (event.lang === _this.translateService.currentLang) {\n                    _this.checkNodes(true, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe(function (event) {\n                _this.checkNodes(true, event.translations);\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(function (event) {\n                _this.checkNodes(true);\n            });\n        }\n    }\n    Object.defineProperty(TranslateDirective.prototype, \"translate\", {\n        /**\n         * @param {?} key\n         * @return {?}\n         */\n        set: function (key) {\n            if (key) {\n                this.key = key;\n                this.checkNodes();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TranslateDirective.prototype, \"translateParams\", {\n        /**\n         * @param {?} params\n         * @return {?}\n         */\n        set: function (params) {\n            if (!equals(this.currentParams, params)) {\n                this.currentParams = params;\n                this.checkNodes(true);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TranslateDirective.prototype.ngAfterViewChecked = function () {\n        this.checkNodes();\n    };\n    /**\n     * @param {?=} forceUpdate\n     * @param {?=} translations\n     * @return {?}\n     */\n    TranslateDirective.prototype.checkNodes = function (forceUpdate, translations) {\n        if (forceUpdate === void 0) { forceUpdate = false; }\n        var /** @type {?} */ nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for (var /** @type {?} */ i = 0; i < nodes.length; ++i) {\n            var /** @type {?} */ node = nodes[i];\n            if (node.nodeType === 3) {\n                // node type 3 is a text node\n                var /** @type {?} */ key = void 0;\n                if (this.key) {\n                    key = this.key;\n                    if (forceUpdate) {\n                        node.lastKey = null;\n                    }\n                }\n                else {\n                    var /** @type {?} */ content = this.getContent(node);\n                    var /** @type {?} */ trimmedContent = content.trim();\n                    if (trimmedContent.length) {\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = this.getContent(node);\n                        }\n                        else if (node.originalContent && forceUpdate) {\n                            // the content seems ok, but the lang has changed\n                            node.lastKey = null;\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    };\n    /**\n     * @param {?} key\n     * @param {?} node\n     * @param {?} translations\n     * @return {?}\n     */\n    TranslateDirective.prototype.updateValue = function (key, node, translations) {\n        var _this = this;\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            var /** @type {?} */ onTranslation = function (res) {\n                if (res !== key) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = _this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                _this.setContent(node, _this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                _this._ref.markForCheck();\n            };\n            if (isDefined(translations)) {\n                var /** @type {?} */ res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (typeof res.subscribe === \"function\") {\n                    res.subscribe(onTranslation);\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    TranslateDirective.prototype.getContent = function (node) {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    };\n    /**\n     * @param {?} node\n     * @param {?} content\n     * @return {?}\n     */\n    TranslateDirective.prototype.setContent = function (node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    TranslateDirective.prototype.ngOnDestroy = function () {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    };\n    return TranslateDirective;\n}());\nTranslateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[translate],[ngx-translate]'\n            },] },\n];\n/** @nocollapse */\nTranslateDirective.ctorParameters = function () { return [\n    { type: TranslateService, },\n    { type: ElementRef, },\n    { type: ChangeDetectorRef, },\n]; };\nTranslateDirective.propDecorators = {\n    \"translate\": [{ type: Input },],\n    \"translateParams\": [{ type: Input },],\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar TranslatePipe = /** @class */ (function () {\n    /**\n     * @param {?} translate\n     * @param {?} _ref\n     */\n    function TranslatePipe(translate, _ref) {\n        this.translate = translate;\n        this._ref = _ref;\n        this.value = '';\n    }\n    /**\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @param {?=} translations\n     * @return {?}\n     */\n    TranslatePipe.prototype.updateValue = function (key, interpolateParams, translations) {\n        var _this = this;\n        var /** @type {?} */ onTranslation = function (res) {\n            _this.value = res !== undefined ? res : key;\n            _this.lastKey = key;\n            _this._ref.markForCheck();\n        };\n        if (translations) {\n            var /** @type {?} */ res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if (typeof res.subscribe === 'function') {\n                res.subscribe(onTranslation);\n            }\n            else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    };\n    /**\n     * @param {?} query\n     * @param {...?} args\n     * @return {?}\n     */\n    TranslatePipe.prototype.transform = function (query) {\n        var _this = this;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (!query || query.length === 0) {\n            return query;\n        }\n        // if we ask another time for the same key, return the last value\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n        var /** @type {?} */ interpolateParams;\n        if (isDefined(args[0]) && args.length) {\n            if (typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                var /** @type {?} */ validArgs = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                }\n                catch (e) {\n                    throw new SyntaxError(\"Wrong parameter in TranslatePipe. Expected a valid Object, received: \" + args[0]);\n                }\n            }\n            else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n        // store the query, in case it changes\n        this.lastKey = query;\n        // store the params, in case they change\n        this.lastParams = args;\n        // set the value\n        this.updateValue(query, interpolateParams);\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n        // subscribe to onTranslationChange event, in case the translations change\n        if (!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe(function (event) {\n                if (_this.lastKey && event.lang === _this.translate.currentLang) {\n                    _this.lastKey = null;\n                    _this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe(function (event) {\n                if (_this.lastKey) {\n                    _this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    _this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(function () {\n                if (_this.lastKey) {\n                    _this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    _this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n        return this.value;\n    };\n    /**\n     * Clean any existing subscription to change events\n     * @return {?}\n     */\n    TranslatePipe.prototype._dispose = function () {\n        if (typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if (typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if (typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    TranslatePipe.prototype.ngOnDestroy = function () {\n        this._dispose();\n    };\n    return TranslatePipe;\n}());\nTranslatePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{\n                name: 'translate',\n                pure: false // required to update the value when the promise is resolved\n            },] },\n];\n/** @nocollapse */\nTranslatePipe.ctorParameters = function () { return [\n    { type: TranslateService, },\n    { type: ChangeDetectorRef, },\n]; };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar TranslateModule = /** @class */ (function () {\n    function TranslateModule() {\n    }\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {?=} config\n     * @return {?}\n     */\n    TranslateModule.forRoot = function (config) {\n        if (config === void 0) { config = {}; }\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                TranslateStore,\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                TranslateService\n            ]\n        };\n    };\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} config\n     * @return {?}\n     */\n    TranslateModule.forChild = function (config) {\n        if (config === void 0) { config = {}; }\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                TranslateService\n            ]\n        };\n    };\n    return TranslateModule;\n}());\nTranslateModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    TranslatePipe,\n                    TranslateDirective\n                ],\n                exports: [\n                    TranslatePipe,\n                    TranslateDirective\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { TranslateModule, TranslateLoader, TranslateFakeLoader, USE_STORE, USE_DEFAULT_LANG, TranslateService, MissingTranslationHandler, FakeMissingTranslationHandler, TranslateParser, TranslateDefaultParser, TranslateCompiler, TranslateFakeCompiler, TranslateDirective, TranslatePipe, TranslateStore };\n//# sourceMappingURL=ngx-translate-core.js.map\n","import { Injectable, ChangeDetectorRef } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    private http: HttpClient, \n    public router: Router, \n    private translateService: TranslateService\n  ) {\n    this.userToken = window.sessionStorage.getItem('son_session');\n    \n  }\n\n  public API_URL = 'http://211.20.94.210:3000/son';\n  public userToken = null;\n  public lang = 'zh-TW';\n\n  public setUserToken(son_session: string) {\n    if (son_session == null) {\n      window.sessionStorage.removeItem('son_session');\n    } else {\n      window.sessionStorage.setItem('son_session', son_session);\n    }\n    this.userToken = son_session;\n  }\n\n  /**\n   * logout\n   */\n  public logout() {\n    const form = {\n      session: this.userToken\n    };\n    this.http.post(`${this.API_URL}/logout`, JSON.stringify(form)).subscribe(\n      res => {\n        this.setUserToken(null);\n        this.router.navigate(['/logon']);\n      }\n    );\n  }\n\n  /**\n   * get token from server and save TokenResponse to localstorage\n   * @param treq TokenRequest\n   */\n  public logon(loginForm): Observable<any> {\n    return this.http.post(`${this.API_URL}/login`, loginForm);\n  }\n\n  public changeLanguage(langulage) {\n    this.translateService.use(langulage);\n  }\n}\n"],"sourceRoot":""}