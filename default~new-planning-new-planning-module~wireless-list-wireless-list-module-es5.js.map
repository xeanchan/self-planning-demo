{"version":3,"sources":["webpack:///src/app/form/CalculateForm.ts","webpack:///src/app/new-planning/new-planning-routing.module.ts","webpack:///src/app/new-planning/new-planning.component.ts","webpack:///src/app/new-planning/new-planning.component.html","webpack:///src/app/new-planning/new-planning.module.ts","webpack:///src/app/site/task-form.service.ts"],"names":["CalculateForm","sessionid","taskName","totalRound","mapName","mapImage","createTime","crossover","mutation","iteration","seed","defaultBs","candidateBs","width","height","altitude","zValue","pathLossModelId","ueCoordinate","useUeCoordinate","powerMaxRange","powerMinRange","beamMaxId","beamMinId","objectiveIndex","threshold","obstacleInfo","availableNewBsNumber","addFixedBsNumber","bandwidth","Frequency","isAverageSinr","sinrRatio","isAvgThroughput","throughputRatio","isCoverage","coverageRatio","isUeAvgSinr","ueAvgSinrRatio","isUeAvgThroughput","ueAvgThroughputRatio","isUeTpByDistance","ueTpByDistanceRatio","modelname","distanceFactor","contantFactor","mctsC","mctsMimo","mctsTemperature","mctsTime","mctsTestTime","mctsTotalTime","routes","path","component","NewPlanningRoutingModule","forChild","imports","exports","NewPlanningComponent","router","authService","matDialog","http","taskFormService","calculateForm","sessionStorage","removeItem","userToken","event","file","target","files","reader","FileReader","readAsDataURL","onload","result","name","setItem","JSON","stringify","closeAll","navigate","fileChange","ok","selector","templateUrl","styleUrls","NewPlanningModule","declarations","entryComponents","TaskFormService","providedIn"],"mappings":"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","file":"default~new-planning-new-planning-module~wireless-list-wireless-list-module-es5.js","sourcesContent":["export class CalculateForm {\n\n  sessionid = null;\n  taskName = null;\n  totalRound = null;\n  mapName = null;\n  mapImage = null;\n  createTime = null;\n  crossover = null;\n  mutation = null;\n  iteration = null;\n  seed = '1';\n  defaultBs = null;\n  candidateBs = null;\n  width = null;\n  height = null;\n  altitude = null;\n  zValue = null;\n  pathLossModelId = null;\n  ueCoordinate = null;\n  useUeCoordinate = null;\n  powerMaxRange = null;\n  powerMinRange = null;\n  beamMaxId = null;\n  beamMinId = null;\n  objectiveIndex = null;\n  threshold = null;\n  obstacleInfo = null;\n  availableNewBsNumber = null;\n  addFixedBsNumber = null;\n  bandwidth = null;\n  Frequency = null;\n  isAverageSinr = false;\n  sinrRatio = null;\n  isAvgThroughput = false;\n  throughputRatio = null;\n  isCoverage = false;\n  coverageRatio = null;\n  isUeAvgSinr = false;\n  ueAvgSinrRatio = null;\n  isUeAvgThroughput = false;\n  ueAvgThroughputRatio = null;\n  isUeTpByDistance = false;\n  ueTpByDistanceRatio = false;\n  modelname = null;\n  distanceFactor = null;\n  contantFactor = null;\n  mctsC = null;\n  mctsMimo = null;\n  mctsTemperature = null;\n  mctsTime = null;\n  mctsTestTime = null;\n  mctsTotalTime = null;\n\n  // constructor(options: {\n  //   sessionid?: string,\n  //   taskName?: string,\n  //   totalRound?: string,\n  //   mapName?: string,\n  //   mapImage?: string,\n  //   createTime?: string,\n  //   crossover?: string,\n  //   mutation?: string,\n  //   iteration?: string,\n  //   seed?: string,\n  //   defaultBs?: string,\n  //   candidateBs?: string,\n  //   width?: string,\n  //   height?: string,\n  //   altitude?: string,\n  //   zValue?: string,\n  //   pathLossModelId?: string,\n  //   ueCoordinate?: string,\n  //   useUeCoordinate?: string,\n  //   powerMaxRange?: string,\n  //   powerMinRange?: string,\n  //   beamMaxId?: string,\n  //   beamMinId?: string,\n  //   objectiveIndex?: string,\n  //   threshold?: string,\n  //   obstacleInfo?: string,\n  //   availableNewBsNumber?: string,\n  //   addFixedBsNumber?: string,\n  //   bandwidth?: string,\n  //   Frequency?: string\n  // } = {}) {\n  //     this.sessionid = options.sessionid;\n  //     this.taskName = options.taskName;\n  //     this.mapName = options.mapName;\n  //     this.mapImage = options.mapImage;\n  //     this.createTime = options.createTime;\n  //     this.crossover = options.crossover;\n  //     this.mutation = options.mutation;\n  //     this.iteration = options.iteration;\n  //     this.seed = options.seed;\n  //     this.defaultBs = options.defaultBs;\n  //     this.candidateBs = options.candidateBs;\n  //     this.width = options.width;\n  //     this.height = options.height;\n  //     this.altitude = options.altitude;\n  //     this.zValue = options.zValue;\n  //     this.pathLossModelId = options.pathLossModelId;\n  //     this.ueCoordinate = options.ueCoordinate;\n  //     this.useUeCoordinate = options.useUeCoordinate;\n  //     this.powerMaxRange = options.powerMaxRange;\n  //     this.powerMinRange = options.powerMinRange;\n  //     this.beamMaxId = options.beamMaxId;\n  //     this.beamMinId = options.beamMinId;\n  //     this.objectiveIndex = options.objectiveIndex;\n  //     this.threshold = options.threshold;\n  //     this.obstacleInfo = options.obstacleInfo;\n  //     this.availableNewBsNumber = options.availableNewBsNumber;\n  //     this.addFixedBsNumber = options.addFixedBsNumber;\n  //     this.bandwidth = options.bandwidth;\n  //     this.Frequency = options.Frequency;\n  // }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NewPlanningComponent } from './new-planning.component';\n\nconst routes: Routes = [\n  { path: '', component: NewPlanningComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class NewPlanningRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { HttpClient } from '@angular/common/http';\nimport { TaskFormService } from '../site/task-form.service';\nimport { CalculateForm } from '../form/CalculateForm';\nimport { AuthService } from '../service/auth.service';\n\n@Component({\n  selector: 'app-new-planning',\n  templateUrl: './new-planning.component.html',\n  styleUrls: ['./new-planning.component.scss']\n})\nexport class NewPlanningComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private matDialog: MatDialog,\n    private http: HttpClient,\n    private taskFormService: TaskFormService) {\n      sessionStorage.removeItem('sessionStorage');\n    }\n\n  calculateForm: CalculateForm = new CalculateForm();\n\n  ngOnInit() {\n    this.calculateForm.sessionid = this.authService.userToken;\n  }\n\n  fileChange(event) {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      this.calculateForm.mapImage = reader.result;\n    };\n    this.calculateForm.mapName = file.name;\n  }\n\n  ok() {\n    sessionStorage.setItem('calculateForm', JSON.stringify(this.calculateForm));\n    this.taskFormService.calculateForm = this.calculateForm;\n    this.matDialog.closeAll();\n    this.router.navigate(['/site/site-planning']);\n  }\n\n}\n","<h3>新專案規劃\n  <span class=\"example-button-row\">\n      <button mat-button>匯入舊檔(.csv)</button>\n  </span>\n</h3>\n<div class=\"modalContent\">\n  <table>\n    <tbody>\n      <tr>\n        <td class=\"th\">規劃案名稱</td>\n        <td><input type=\"text\" class=\"w100\" [(ngModel)]=\"calculateForm.taskName\" ></td>\n      </tr>\n      <!--<tr>\n        <td class=\"th\">規劃目標</td>\n        <td>\n          <mat-radio-group aria-label=\"Select an option\">\n            <mat-radio-button value=\"1\">UE 平均 SINR 最大</mat-radio-button>\n            <mat-radio-button value=\"2\">UE 覆蓋範圍最大</mat-radio-button>\n            <mat-radio-button value=\"3\">UE 平均下行 Throughput 最大</mat-radio-button>\n            <mat-radio-button value=\"4\">場域平均 SINR 最大</mat-radio-button>\n            <mat-radio-button value=\"5\">場域覆蓋範圍最大</mat-radio-button>\n          </mat-radio-group>\n        </td>\n      </tr>-->\n      <tr>\n        <td class=\"th\">場域平面圖</td>\n        <td>\n          <input type=\"file\" (change)=\"fileChange($event)\" accept=\"image/jpeg,image/png,image/jpg\" >\n          <span class=\"note\">圖檔限制...</span>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"th\">場域尺寸</td>\n        <td class=\"size\">\n          <span><input type=\"text\" placeholder=\"長\" [(ngModel)]=\"calculateForm.width\" >公尺</span>\n          <span><input type=\"text\" placeholder=\"寬\" [(ngModel)]=\"calculateForm.height\">公尺</span>\n          <span><input type=\"text\" placeholder=\"高\" [(ngModel)]=\"calculateForm.altitude\">公尺</span>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"th\">網路種類</td>\n        <td>\n          <mat-radio-group [(ngModel)]=\"calculateForm.objectiveIndex\" aria-label=\"Select an option\">\n            <mat-radio-button value=\"1\">4G</mat-radio-button>\n            <mat-radio-button value=\"2\">5G</mat-radio-button>\n            <mat-radio-button value=\"3\">Wifi</mat-radio-button>\n          </mat-radio-group>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <div class=\"modalFooter\">\n    <a href=\"javascript:void(0)\" (click)=\"ok()\">確定</a>\n  </div>\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NewPlanningComponent } from './new-planning.component';\nimport { RouterModule } from '@angular/router';\nimport { NewPlanningRoutingModule } from './new-planning-routing.module';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatButtonToggleModule,\n    MatIconModule,\n    NewPlanningRoutingModule,\n    RouterModule,\n    MatRadioModule\n  ],\n  declarations: [NewPlanningComponent],\n  entryComponents: [NewPlanningComponent],\n  exports: [NewPlanningComponent]\n})\nexport class NewPlanningModule { }\n","import { Injectable } from '@angular/core';\nimport { CalculateForm } from '../form/CalculateForm';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskFormService {\n\n  constructor() { }\n\n  calculateForm: CalculateForm;\n\n}\n"]}