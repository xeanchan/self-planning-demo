{"version":3,"sources":["webpack:///src/app/new-planning/new-planning-routing.module.ts","webpack:///src/app/new-planning/new-planning.component.ts","webpack:///src/app/new-planning/new-planning.component.html","webpack:///src/app/new-planning/new-planning.module.ts","webpack:///src/app/site/task-form.service.ts"],"names":["routes","path","component","NewPlanningRoutingModule","forChild","imports","exports","NewPlanningComponent","router","authService","matDialog","http","taskFormService","data","calculateForm","showImgMsg","sessionStorage","removeItem","timeInterval","sessionid","userToken","formGroup","taskName","required","sizeValidator","control","width","get","height","altitude","valid","sizeRevealed","sizeGroup","validators","event","file","target","files","reader","FileReader","readAsDataURL","onload","mapImage","result","toString","mapName","name","input","document","querySelector","querySelectorAll","i","length","focus","blur","invalid","window","clearInterval","setItem","JSON","stringify","closeAll","navigate","fileChange","ok","selector","templateUrl","styleUrls","NewPlanningModule","declarations","entryComponents","TaskFormService","providedIn"],"mappings":"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","file":"default~new-planning-new-planning-module~wireless-list-wireless-list-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NewPlanningComponent } from './new-planning.component';\n\nconst routes: Routes = [\n  { path: '', component: NewPlanningComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class NewPlanningRoutingModule { }\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { HttpClient } from '@angular/common/http';\nimport { TaskFormService } from '../site/task-form.service';\nimport { CalculateForm } from '../form/CalculateForm';\nimport { AuthService } from '../service/auth.service';\nimport { FormControl, FormGroup, Validators, ValidatorFn, ValidationErrors } from '@angular/forms';\n\n@Component({\n  selector: 'app-new-planning',\n  templateUrl: './new-planning.component.html',\n  styleUrls: ['./new-planning.component.scss']\n})\nexport class NewPlanningComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private matDialog: MatDialog,\n    private http: HttpClient,\n    private taskFormService: TaskFormService,\n    @Inject(MAT_DIALOG_DATA) public data) {\n      sessionStorage.removeItem('calculateForm');\n      sessionStorage.removeItem('importFile');\n      this.timeInterval = data.timeInterval;\n    }\n\n  calculateForm: CalculateForm = new CalculateForm();\n  formGroup: FormGroup;\n  sizeGroup: FormGroup;\n  showImgMsg = false;\n  timeInterval;\n\n  get taskName() { return this.formGroup.get('taskName'); }\n  get width() { return this.sizeGroup.get('width'); }\n  get height() { return this.sizeGroup.get('height'); }\n  get altitude() { return this.sizeGroup.get('altitude'); }\n\n  ngOnInit() {\n    this.calculateForm.sessionid = this.authService.userToken;\n\n    this.formGroup = new FormGroup({\n      taskName: new FormControl(this.calculateForm.taskName, [\n        Validators.required\n      ])\n    });\n\n    const sizeValidator: ValidatorFn = (control: FormGroup): ValidationErrors | null => {\n      const width = control.get('width');\n      const height = control.get('height');\n      const altitude = control.get('altitude');\n\n      if (width.valid && height.valid && altitude.valid) {\n        return null;\n      } else {\n        return { sizeRevealed: true };\n      }\n    };\n\n    this.sizeGroup = new FormGroup({\n      width: new FormControl(),\n      height: new FormControl(),\n      altitude: new FormControl()\n    }, { validators: sizeValidator });\n  }\n\n  fileChange(event) {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      this.calculateForm.mapImage = reader.result.toString();\n    };\n    this.calculateForm.mapName = file.name;\n    this.showImgMsg = false;\n  }\n\n  ok() {\n    const input: NodeListOf<HTMLInputElement> = document.querySelector('.modalContent').querySelectorAll('input[type=\"text\"]');\n    for (let i = 0; i < input.length; i++) {\n      input[i].focus();\n      input[i].blur();\n    }\n    if (this.calculateForm.mapName == null) {\n      this.showImgMsg = true;\n      return;\n    }\n    if (this.formGroup.invalid || this.sizeGroup.invalid) {\n      return;\n    }\n    window.clearInterval(this.timeInterval);\n    sessionStorage.setItem('calculateForm', JSON.stringify(this.calculateForm));\n    this.taskFormService.calculateForm = this.calculateForm;\n    this.matDialog.closeAll();\n    this.router.navigate(['/site/site-planning']);\n  }\n\n  import(event) {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      sessionStorage.setItem('importFile', reader.result.toString());\n      window.clearInterval(this.timeInterval);\n      this.matDialog.closeAll();\n      this.router.navigate(['/site/site-planning']);\n    };\n  }\n\n}\n","<h3>新專案規劃\n  <span class=\"example-button-row\">\n      <button mat-button (click)=\"importFile.click()\">匯入舊檔(.xlsx)</button>\n      <input type=\"file\" #importFile style=\"display: none;\" (change)=\"import($event)\" accept=\".xlsx\">\n  </span>\n</h3>\n<div class=\"modalContent\">\n  <table>\n    <tbody>\n      <tr>\n        <td class=\"th\">規劃案名稱</td>\n        <td [formGroup]=\"formGroup\">\n          \n            <input type=\"text\" class=\"w100\" [(ngModel)]=\"this.calculateForm.taskName\" formControlName=\"taskName\" required >\n            <div *ngIf=\"taskName.invalid && (taskName.dirty || taskName.touched)\" class=\"alert alert-danger\">\n              <div *ngIf=\"taskName.errors.required\">\n                {{ 'field.required' | translate }}\n              </div>\n            </div>\n        </td>\n      </tr>\n      <!--<tr>\n        <td class=\"th\">規劃目標</td>\n        <td>\n          <mat-radio-group aria-label=\"Select an option\">\n            <mat-radio-button value=\"1\">UE 平均 SINR 最大</mat-radio-button>\n            <mat-radio-button value=\"2\">UE 覆蓋範圍最大</mat-radio-button>\n            <mat-radio-button value=\"3\">UE 平均下行 Throughput 最大</mat-radio-button>\n            <mat-radio-button value=\"4\">場域平均 SINR 最大</mat-radio-button>\n            <mat-radio-button value=\"5\">場域覆蓋範圍最大</mat-radio-button>\n          </mat-radio-group>\n        </td>\n      </tr>-->\n      <tr>\n        <td class=\"th\">場域平面圖</td>\n        <td>\n          <input type=\"file\" (change)=\"fileChange($event)\" accept=\"image/jpeg,image/png,image/jpg\" >\n          <span class=\"note\">圖檔限制...</span>\n          <div *ngIf=\"showImgMsg\" class=\"alert alert-danger\">\n              {{ 'image.required' | translate }}\n          </div>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"th\">場域尺寸</td>\n        <td class=\"size\" [formGroup]=\"sizeGroup\">\n          <span><input type=\"text\" placeholder=\"長\" [(ngModel)]=\"calculateForm.width\" formControlName=\"width\" required pattern=\"[1-9][0-9]*\">公尺</span>\n          <span><input type=\"text\" placeholder=\"寬\" [(ngModel)]=\"calculateForm.height\" formControlName=\"height\" required pattern=\"[1-9][0-9]*\">公尺</span>\n          <span><input type=\"text\" placeholder=\"高\" [(ngModel)]=\"calculateForm.altitude\" formControlName=\"altitude\" required pattern=\"[1-9][0-9]*\">公尺</span>\n          <div *ngIf=\"sizeGroup.errors?.sizeRevealed && (sizeGroup.touched || sizeGroup.dirty)\" class=\"alert alert-danger\">\n            <div *ngIf=\"width.errors?.pattern || height.errors?.pattern || altitude.errors?.pattern; else required\">\n              {{ 'numeric.enter' | translate }}\n            </div>\n            <ng-template #required>\n              {{ 'field.required' | translate }}\n            </ng-template>\n          </div>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"th\">網路種類</td>\n        <td>\n          <mat-radio-group [(ngModel)]=\"calculateForm.objectiveIndex\" aria-label=\"Select an option\">\n            <mat-radio-button value=\"0\">4G</mat-radio-button>\n            <mat-radio-button value=\"1\">5G</mat-radio-button>\n            <mat-radio-button value=\"2\">Wifi</mat-radio-button>\n          </mat-radio-group>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <div class=\"modalFooter\">\n    <a href=\"javascript:void(0)\" (click)=\"ok()\">確定</a>\n  </div>\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NewPlanningComponent } from './new-planning.component';\nimport { RouterModule } from '@angular/router';\nimport { NewPlanningRoutingModule } from './new-planning-routing.module';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatButtonToggleModule,\n    MatIconModule,\n    NewPlanningRoutingModule,\n    RouterModule,\n    MatRadioModule,\n    TranslateModule\n  ],\n  declarations: [NewPlanningComponent],\n  entryComponents: [NewPlanningComponent],\n  exports: [NewPlanningComponent]\n})\nexport class NewPlanningModule { }\n","import { Injectable } from '@angular/core';\nimport { CalculateForm } from '../form/CalculateForm';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskFormService {\n\n  constructor() { }\n\n  calculateForm: CalculateForm;\n\n}\n"]}